AGS_BP_DOCK = "scar_dock"
AGS_ENTITY_TABLE = {
	english = {
		scar_dock = "building_unit_naval_eng",		
	},
	chinese = {
		scar_dock = "building_unit_naval_chi",	
	},
	french = {
		scar_dock = "building_unit_naval_fre",	
	},
	hre = {
		scar_dock = "building_unit_naval_hre",	
	},
	rus = {	
		scar_dock = "building_unit_naval_rus",	
	},
	abbasid = {
		scar_dock = "building_unit_naval_abb",	
	},
	mongol = {
		scar_dock = "building_unit_naval_mon",	
	},
	sultanate = {
		scar_dock = "building_unit_naval_sul",	
	},
	malian = {
		scar_dock = "building_unit_naval_mal",
	},
	ottoman = {
		scar_dock = "building_unit_naval_ott",	
	},
}
AGS_POPULATION_PER_DOCK = 5

function AGS_DockHouse_OnPlay()
	AGS_Print("AGS_DockHouse_OnPlay")
	Rule_AddGlobalEvent(AGS_DockHouse_OnConstructionComplete, GE_ConstructionComplete)
	Rule_AddGlobalEvent(AGS_DockHouse_OnEntityKilled, GE_EntityKilled)
end

function AGS_DockHouse_GameOver()
	AGS_Print("AGS_DockHouse_GameOver")
	Rule_RemoveGlobalEvent(AGS_DockHouse_OnConstructionComplete)
	Rule_RemoveGlobalEvent(AGS_DockHouse_OnEntityKilled)
end

function AGS_DockHouse_OnConstructionComplete()
	if context == nil or context.player == nil or context.entity == nil then 
		return
	end	
	local new_context = {
		player = Core_GetPlayersTableEntry(context.player),
		entity_id = context.entity,
		entity_uwid = Entity_GetID(context.entity),
		--entity_position = Entity_GetPosition(context.entity),
	}	
	-- Eliminated players are not interesting for any conditions.
	if new_context.player == nil or new_context.player.isEliminated then
		return
	end
	
	if AGS_IsDock(new_context.entity_id) then
		AGS_DockHouse_AddMinPopulation(new_context.player, AGS_POPULATION_PER_DOCK)
	end
end

function AGS_DockHouse_OnEntityKilled()
	if context == nil or context.victim == nil or context.victimOwner == nil then 
		return
	end	
	local new_context = {
		player = Core_GetPlayersTableEntry(context.victimOwner),
		entity_id = context.victim,
		entity_uwid = Entity_GetID(context.victim),
		--entity_position = Entity_GetPosition(context.victim),
	}	
	-- Eliminated players are not interesting for any conditions.
	if new_context.player == nil or new_context.player.isEliminated then
		return
	end
	
	if AGS_IsDock(new_context.entity_id) then
		AGS_DockHouse_RemoveMinPopulation(new_context.player, AGS_POPULATION_PER_DOCK)
	end
end

function AGS_IsDock(entity_id)		
	return Entity_IsOfType(entity_id, AGS_BP_DOCK)
end

-- Apply function.
function AGS_DockHouse_AddMaxCapPopulation(player, value)
	Modifier_ApplyToPlayer(Modifier_Create(MAT_Player, "max_medic_cap_player_modifier", MUT_Addition, false, value, ""), player.id, 0)
end
function AGS_DockHouse_AddMinPopulation(player, value)
	Modifier_ApplyToPlayer(Modifier_Create(MAT_Player, "medic_cap_player_modifier", MUT_Addition, false, value, ""), player.id, 0)
end
-- Apply function.
function AGS_DockHouse_RemoveMaxCapPopulation(player, value)
	Modifier_ApplyToPlayer(Modifier_Create(MAT_Player, "max_medic_cap_player_modifier", MUT_Addition, false, -value, ""), player.id, 0)
end
function AGS_DockHouse_RemoveMinPopulation(player, value)
	Modifier_ApplyToPlayer(Modifier_Create(MAT_Player, "medic_cap_player_modifier", MUT_Addition, false, -value, ""), player.id, 0)
end